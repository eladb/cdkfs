// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`inventory 1`] = `
Array [
  Object {
    "docs": "jsii library project.",
    "fqn": "projen.JsiiProject",
    "options": Array [
      Object {
        "default": "true",
        "docs": "Checks that after build there are no modified files onn git.",
        "name": "antitamper",
        "optional": true,
        "path": Array [
          "antitamper",
        ],
        "switch": "antitamper",
        "type": "boolean",
      },
      Object {
        "name": "authorEmail",
        "optional": true,
        "path": Array [
          "authorEmail",
        ],
        "switch": "author-email",
        "type": "string",
      },
      Object {
        "name": "authorName",
        "path": Array [
          "authorName",
        ],
        "switch": "author-name",
        "type": "string",
      },
      Object {
        "name": "authorOrganization",
        "optional": true,
        "path": Array [
          "authorOrganization",
        ],
        "switch": "author-organization",
        "type": "boolean",
      },
      Object {
        "name": "authorUrl",
        "optional": true,
        "path": Array [
          "authorUrl",
        ],
        "switch": "author-url",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Automatically add all executables under the \`bin\` directory to your \`package.json\` file under the \`bin\` section.",
        "name": "autoDetectBin",
        "optional": true,
        "path": Array [
          "autoDetectBin",
        ],
        "switch": "auto-detect-bin",
        "type": "boolean",
      },
      Object {
        "default": "every 6 hours",
        "docs": "CRON schedule for automatically bumping and releasing a new version.",
        "name": "autoReleaseSchedule",
        "optional": true,
        "path": Array [
          "autoReleaseSchedule",
        ],
        "switch": "auto-release-schedule",
        "type": "string",
      },
      Object {
        "docs": "Binary programs vended with your module.",
        "name": "bin",
        "optional": true,
        "path": Array [
          "bin",
        ],
        "switch": "bin",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Define a GitHub workflow for building PRs.",
        "name": "buildWorkflow",
        "optional": true,
        "path": Array [
          "buildWorkflow",
        ],
        "switch": "build-workflow",
        "type": "boolean",
      },
      Object {
        "name": "bundledDependencies",
        "optional": true,
        "path": Array [
          "bundledDependencies",
        ],
        "switch": "bundled-dependencies",
        "type": "unknown",
      },
      Object {
        "default": "false",
        "docs": "Automatically run API compatibility test against the latest version published to npm after compilation.",
        "name": "compat",
        "optional": true,
        "path": Array [
          "compat",
        ],
        "switch": "compat",
        "type": "boolean",
      },
      Object {
        "default": ".compatignore",
        "docs": "Name of the ignore file for API compatibility tests.",
        "name": "compatIgnore",
        "optional": true,
        "path": Array [
          "compatIgnore",
        ],
        "switch": "compat-ignore",
        "type": "string",
      },
      Object {
        "default": "defaults to the value of authorName or \\"\\" if \`authorName\` is undefined.",
        "docs": "License copyright owner.",
        "name": "copyrightOwner",
        "optional": true,
        "path": Array [
          "copyrightOwner",
        ],
        "switch": "copyright-owner",
        "type": "string",
      },
      Object {
        "default": "current year",
        "docs": "The copyright years to put in the LICENSE file.",
        "name": "copyrightPeriod",
        "optional": true,
        "path": Array [
          "copyrightPeriod",
        ],
        "switch": "copyright-period",
        "type": "string",
      },
      Object {
        "default": "true;",
        "docs": "Include dependabot configuration.",
        "name": "dependabot",
        "optional": true,
        "path": Array [
          "dependabot",
        ],
        "switch": "dependabot",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Automatically merge dependabot PRs if build CI build passes.",
        "name": "autoMerge",
        "optional": true,
        "path": Array [
          "dependabotOptions",
          "autoMerge",
        ],
        "switch": "dependabot-options-auto-merge",
        "type": "boolean",
      },
      Object {
        "name": "dependencies",
        "optional": true,
        "path": Array [
          "dependencies",
        ],
        "switch": "dependencies",
        "type": "unknown",
      },
      Object {
        "name": "description",
        "optional": true,
        "path": Array [
          "description",
        ],
        "switch": "description",
        "type": "string",
      },
      Object {
        "name": "devDependencies",
        "optional": true,
        "path": Array [
          "devDependencies",
        ],
        "switch": "dev-dependencies",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Automatically generate API.md from jsii.",
        "name": "docgen",
        "optional": true,
        "path": Array [
          "docgen",
        ],
        "switch": "docgen",
        "type": "boolean",
      },
      Object {
        "name": "dotNetNamespace",
        "optional": true,
        "path": Array [
          "dotnet",
          "dotNetNamespace",
        ],
        "switch": "dotnet-dot-net-namespace",
        "type": "string",
      },
      Object {
        "name": "packageId",
        "optional": true,
        "path": Array [
          "dotnet",
          "packageId",
        ],
        "switch": "dotnet-package-id",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Install eslint.",
        "name": "eslint",
        "optional": true,
        "path": Array [
          "eslint",
        ],
        "switch": "eslint",
        "type": "boolean",
      },
      Object {
        "name": "javaPackage",
        "optional": true,
        "path": Array [
          "java",
          "javaPackage",
        ],
        "switch": "java-java-package",
        "type": "string",
      },
      Object {
        "name": "mavenArtifactId",
        "optional": true,
        "path": Array [
          "java",
          "mavenArtifactId",
        ],
        "switch": "java-maven-artifact-id",
        "type": "string",
      },
      Object {
        "name": "mavenGroupId",
        "optional": true,
        "path": Array [
          "java",
          "mavenGroupId",
        ],
        "switch": "java-maven-group-id",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Use jest for unit tests.",
        "name": "jest",
        "optional": true,
        "path": Array [
          "jest",
        ],
        "switch": "jest",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Collect coverage.",
        "name": "coverage",
        "optional": true,
        "path": Array [
          "jestOptions",
          "coverage",
        ],
        "switch": "jest-options-coverage",
        "type": "boolean",
      },
      Object {
        "name": "branches",
        "optional": true,
        "path": Array [
          "jestOptions",
          "coverageThreshold",
          "branches",
        ],
        "switch": "jest-options-coverage-threshold-branches",
        "type": "number",
      },
      Object {
        "name": "functions",
        "optional": true,
        "path": Array [
          "jestOptions",
          "coverageThreshold",
          "functions",
        ],
        "switch": "jest-options-coverage-threshold-functions",
        "type": "number",
      },
      Object {
        "name": "lines",
        "optional": true,
        "path": Array [
          "jestOptions",
          "coverageThreshold",
          "lines",
        ],
        "switch": "jest-options-coverage-threshold-lines",
        "type": "number",
      },
      Object {
        "name": "statements",
        "optional": true,
        "path": Array [
          "jestOptions",
          "coverageThreshold",
          "statements",
        ],
        "switch": "jest-options-coverage-threshold-statements",
        "type": "number",
      },
      Object {
        "default": "\\"/node_modules/\\"",
        "docs": "Defines \`testPathIgnorePatterns\` and \`coveragePathIgnorePatterns\`.",
        "name": "ignorePatterns",
        "optional": true,
        "path": Array [
          "jestOptions",
          "ignorePatterns",
        ],
        "switch": "jest-options-ignore-patterns",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.",
        "name": "alwaysStrict",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "alwaysStrict",
        ],
        "switch": "jest-options-typescript-compiler-options-always-strict",
        "type": "boolean",
      },
      Object {
        "docs": "To be specified along with the above.",
        "name": "declaration",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "declaration",
        ],
        "switch": "jest-options-typescript-compiler-options-declaration",
        "type": "boolean",
      },
      Object {
        "docs": "Offers a way to configure the root directory for where declaration files are emitted.",
        "name": "declarationDir",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "declarationDir",
        ],
        "switch": "jest-options-typescript-compiler-options-declaration-dir",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Enables experimental support for decorators, which is in stage 2 of the TC39 standardization process.",
        "name": "experimentalDecorators",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "experimentalDecorators",
        ],
        "switch": "jest-options-typescript-compiler-options-experimental-decorators",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When set, instead of writing out a .js.map file to provide source maps, TypeScript will embed the source map content in the .js files.",
        "name": "inlineSourceMap",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "inlineSourceMap",
        ],
        "switch": "jest-options-typescript-compiler-options-inline-source-map",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When set, TypeScript will include the original content of the .ts file as an embedded string in the source map. This is often useful in the same cases as inlineSourceMap.",
        "name": "inlineSources",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "inlineSources",
        ],
        "switch": "jest-options-typescript-compiler-options-inline-sources",
        "type": "boolean",
      },
      Object {
        "default": "[ 'es2018' ]",
        "docs": "Reference for type definitions / libraries to use (eg.",
        "name": "lib",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "lib",
        ],
        "switch": "jest-options-typescript-compiler-options-lib",
        "type": "unknown",
      },
      Object {
        "default": "'CommonJS'",
        "docs": "Sets the module system for the program.",
        "name": "module",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "module",
        ],
        "switch": "jest-options-typescript-compiler-options-module",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.",
        "name": "noEmitOnError",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noEmitOnError",
        ],
        "switch": "jest-options-typescript-compiler-options-no-emit-on-error",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Report errors for fallthrough cases in switch statements.",
        "name": "noFallthroughCasesInSwitch",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noFallthroughCasesInSwitch",
        ],
        "switch": "jest-options-typescript-compiler-options-no-fallthrough-cases-in-switch",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.",
        "name": "noImplicitAny",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noImplicitAny",
        ],
        "switch": "jest-options-typescript-compiler-options-no-implicit-any",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When enabled, TypeScript will check all code paths in a function to ensure they return a value.",
        "name": "noImplicitReturns",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noImplicitReturns",
        ],
        "switch": "jest-options-typescript-compiler-options-no-implicit-returns",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Raise error on ‘this’ expressions with an implied ‘any’ type.",
        "name": "noImplicitThis",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noImplicitThis",
        ],
        "switch": "jest-options-typescript-compiler-options-no-implicit-this",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Report errors on unused local variables.",
        "name": "noUnusedLocals",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noUnusedLocals",
        ],
        "switch": "jest-options-typescript-compiler-options-no-unused-locals",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Report errors on unused parameters in functions.",
        "name": "noUnusedParameters",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noUnusedParameters",
        ],
        "switch": "jest-options-typescript-compiler-options-no-unused-parameters",
        "type": "boolean",
      },
      Object {
        "docs": "Output directory for the compiled files.",
        "name": "outDir",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "outDir",
        ],
        "switch": "jest-options-typescript-compiler-options-out-dir",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes generating a type for the import based on the static JSON shape.",
        "name": "resolveJsonModule",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "resolveJsonModule",
        ],
        "switch": "jest-options-typescript-compiler-options-resolve-json-module",
        "type": "boolean",
      },
      Object {
        "docs": "Specifies the root directory of input files.",
        "name": "rootDir",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "rootDir",
        ],
        "switch": "jest-options-typescript-compiler-options-root-dir",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.",
        "name": "strict",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "strict",
        ],
        "switch": "jest-options-typescript-compiler-options-strict",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When strictNullChecks is false, null and undefined are effectively ignored by the language.",
        "name": "strictNullChecks",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "strictNullChecks",
        ],
        "switch": "jest-options-typescript-compiler-options-strict-null-checks",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.",
        "name": "strictPropertyInitialization",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "strictPropertyInitialization",
        ],
        "switch": "jest-options-typescript-compiler-options-strict-property-initialization",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Do not emit declarations for code that has an @internal annotation in it’s JSDoc comment.",
        "name": "stripInternal",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "stripInternal",
        ],
        "switch": "jest-options-typescript-compiler-options-strip-internal",
        "type": "boolean",
      },
      Object {
        "default": "'ES2018'",
        "docs": "Modern browsers support all ES6 features, so ES6 is a good choice.",
        "name": "target",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "target",
        ],
        "switch": "jest-options-typescript-compiler-options-target",
        "type": "string",
      },
      Object {
        "name": "exclude",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "exclude",
        ],
        "switch": "jest-options-typescript-exclude",
        "type": "unknown",
      },
      Object {
        "name": "fileName",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "fileName",
        ],
        "switch": "jest-options-typescript-file-name",
        "type": "string",
      },
      Object {
        "name": "include",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "include",
        ],
        "switch": "jest-options-typescript-include",
        "type": "unknown",
      },
      Object {
        "name": "mode",
        "optional": true,
        "path": Array [
          "jsiiVersion",
          "mode",
        ],
        "switch": "jsii-version-mode",
        "type": "string",
      },
      Object {
        "name": "spec",
        "optional": true,
        "path": Array [
          "jsiiVersion",
          "spec",
        ],
        "switch": "jsii-version-spec",
        "type": "string",
      },
      Object {
        "name": "version",
        "optional": true,
        "path": Array [
          "jsiiVersion",
          "version",
        ],
        "switch": "jsii-version-version",
        "type": "string",
      },
      Object {
        "name": "keywords",
        "optional": true,
        "path": Array [
          "keywords",
        ],
        "switch": "keywords",
        "type": "unknown",
      },
      Object {
        "default": "\\"lib\\"",
        "docs": "Compiler artifacts output directory.",
        "name": "libdir",
        "optional": true,
        "path": Array [
          "libdir",
        ],
        "switch": "libdir",
        "type": "string",
      },
      Object {
        "name": "license",
        "optional": true,
        "path": Array [
          "license",
        ],
        "switch": "license",
        "type": "string",
      },
      Object {
        "default": "no max",
        "docs": "Minimum node.js version to require via \`engines\` (inclusive).",
        "name": "maxNodeVersion",
        "optional": true,
        "path": Array [
          "maxNodeVersion",
        ],
        "switch": "max-node-version",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Adds mergify configuration.",
        "name": "mergify",
        "optional": true,
        "path": Array [
          "mergify",
        ],
        "switch": "mergify",
        "type": "boolean",
      },
      Object {
        "name": "rules",
        "optional": true,
        "path": Array [
          "mergifyOptions",
          "rules",
        ],
        "switch": "mergify-options-rules",
        "type": "unknown",
      },
      Object {
        "default": "no \\"engines\\" specified",
        "docs": "Node.js version to require via package.json \`engines\` (inclusive).",
        "name": "minNodeVersion",
        "optional": true,
        "path": Array [
          "minNodeVersion",
        ],
        "switch": "min-node-version",
        "type": "string",
      },
      Object {
        "name": "name",
        "path": Array [
          "name",
        ],
        "switch": "name",
        "type": "string",
      },
      Object {
        "default": "\\"latest\\"",
        "docs": "The dist-tag to use when releasing to npm.",
        "name": "npmDistTag",
        "optional": true,
        "path": Array [
          "npmDistTag",
        ],
        "switch": "npm-dist-tag",
        "type": "string",
      },
      Object {
        "name": "peerDependencies",
        "optional": true,
        "path": Array [
          "peerDependencies",
        ],
        "switch": "peer-dependencies",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Automatically add a pinned dev dependency.",
        "name": "pinnedDevDependency",
        "optional": true,
        "path": Array [
          "peerDependencyOptions",
          "pinnedDevDependency",
        ],
        "switch": "peer-dependency-options-pinned-dev-dependency",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Indicates of \\"projen\\" should be installed as a devDependency.",
        "name": "projenDevDependency",
        "optional": true,
        "path": Array [
          "projenDevDependency",
        ],
        "switch": "projen-dev-dependency",
        "type": "boolean",
      },
      Object {
        "name": "mode",
        "optional": true,
        "path": Array [
          "projenVersion",
          "mode",
        ],
        "switch": "projen-version-mode",
        "type": "string",
      },
      Object {
        "name": "spec",
        "optional": true,
        "path": Array [
          "projenVersion",
          "spec",
        ],
        "switch": "projen-version-spec",
        "type": "string",
      },
      Object {
        "name": "version",
        "optional": true,
        "path": Array [
          "projenVersion",
          "version",
        ],
        "switch": "projen-version-version",
        "type": "string",
      },
      Object {
        "name": "distName",
        "optional": true,
        "path": Array [
          "python",
          "distName",
        ],
        "switch": "python-dist-name",
        "type": "string",
      },
      Object {
        "name": "module",
        "optional": true,
        "path": Array [
          "python",
          "module",
        ],
        "switch": "python-module",
        "type": "string",
      },
      Object {
        "default": "[ \\"master\\" ]",
        "docs": "Branches which trigger a release.",
        "name": "releaseBranches",
        "optional": true,
        "path": Array [
          "releaseBranches",
        ],
        "switch": "release-branches",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Automatically release new versions every commit to one of branches in \`releaseBranches\`.",
        "name": "releaseEveryCommit",
        "optional": true,
        "path": Array [
          "releaseEveryCommit",
        ],
        "switch": "release-every-commit",
        "type": "boolean",
      },
      Object {
        "default": "no scheduled releases",
        "docs": "CRON schedule to trigger new releases.",
        "name": "releaseSchedule",
        "optional": true,
        "path": Array [
          "releaseSchedule",
        ],
        "switch": "release-schedule",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Automatically release to npm when new versions are introduced.",
        "name": "releaseToNpm",
        "optional": true,
        "path": Array [
          "releaseToNpm",
        ],
        "switch": "release-to-npm",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Define a GitHub workflow for releasing from \\"master\\" when new versions are bumped.",
        "name": "releaseWorkflow",
        "optional": true,
        "path": Array [
          "releaseWorkflow",
        ],
        "switch": "release-workflow",
        "type": "boolean",
      },
      Object {
        "name": "repository",
        "path": Array [
          "repository",
        ],
        "switch": "repository",
        "type": "string",
      },
      Object {
        "default": "\\".\\"",
        "name": "rootdir",
        "optional": true,
        "path": Array [
          "rootdir",
        ],
        "switch": "rootdir",
        "type": "string",
      },
      Object {
        "default": "{}",
        "docs": "npm scripts to include.",
        "name": "scripts",
        "optional": true,
        "path": Array [
          "scripts",
        ],
        "switch": "scripts",
        "type": "unknown",
      },
      Object {
        "default": "\\"src\\"",
        "docs": "Typescript sources directory.",
        "name": "srcdir",
        "optional": true,
        "path": Array [
          "srcdir",
        ],
        "switch": "srcdir",
        "type": "string",
      },
      Object {
        "name": "stability",
        "optional": true,
        "path": Array [
          "stability",
        ],
        "switch": "stability",
        "type": "string",
      },
      Object {
        "default": "\\"test\\"",
        "docs": "Tests directory.",
        "name": "testdir",
        "optional": true,
        "path": Array [
          "testdir",
        ],
        "switch": "testdir",
        "type": "string",
      },
      Object {
        "default": "[ { run: \`npx projen\${PROJEN_VERSION}\` }, { run: 'yarn install --frozen-lockfile' } ]",
        "docs": "Workflow steps to use in order to bootstrap this repo.",
        "name": "workflowBootstrapSteps",
        "optional": true,
        "path": Array [
          "workflowBootstrapSteps",
        ],
        "switch": "workflow-bootstrap-steps",
        "type": "unknown",
      },
      Object {
        "default": "default image",
        "docs": "Container image to use for GitHub workflows.",
        "name": "workflowContainerImage",
        "optional": true,
        "path": Array [
          "workflowContainerImage",
        ],
        "switch": "workflow-container-image",
        "type": "string",
      },
      Object {
        "default": "same as \`minNodeVersion\`",
        "docs": "The node version to use in GitHub workflows.",
        "name": "workflowNodeVersion",
        "optional": true,
        "path": Array [
          "workflowNodeVersion",
        ],
        "switch": "workflow-node-version",
        "type": "string",
      },
    ],
    "pjid": "jsii",
    "typename": "JsiiProject",
  },
  Object {
    "docs": undefined,
    "fqn": "projen.NodeProject",
    "options": Array [
      Object {
        "default": "true",
        "docs": "Checks that after build there are no modified files onn git.",
        "name": "antitamper",
        "optional": true,
        "path": Array [
          "antitamper",
        ],
        "switch": "antitamper",
        "type": "boolean",
      },
      Object {
        "docs": "Author's e-mail.",
        "name": "authorEmail",
        "optional": true,
        "path": Array [
          "authorEmail",
        ],
        "switch": "author-email",
        "type": "string",
      },
      Object {
        "docs": "Author's name.",
        "name": "authorName",
        "optional": true,
        "path": Array [
          "authorName",
        ],
        "switch": "author-name",
        "type": "string",
      },
      Object {
        "docs": "Author's Organization.",
        "name": "authorOrganization",
        "optional": true,
        "path": Array [
          "authorOrganization",
        ],
        "switch": "author-organization",
        "type": "boolean",
      },
      Object {
        "docs": "Author's URL / Website.",
        "name": "authorUrl",
        "optional": true,
        "path": Array [
          "authorUrl",
        ],
        "switch": "author-url",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Automatically add all executables under the \`bin\` directory to your \`package.json\` file under the \`bin\` section.",
        "name": "autoDetectBin",
        "optional": true,
        "path": Array [
          "autoDetectBin",
        ],
        "switch": "auto-detect-bin",
        "type": "boolean",
      },
      Object {
        "default": "every 6 hours",
        "docs": "CRON schedule for automatically bumping and releasing a new version.",
        "name": "autoReleaseSchedule",
        "optional": true,
        "path": Array [
          "autoReleaseSchedule",
        ],
        "switch": "auto-release-schedule",
        "type": "string",
      },
      Object {
        "docs": "Binary programs vended with your module.",
        "name": "bin",
        "optional": true,
        "path": Array [
          "bin",
        ],
        "switch": "bin",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Define a GitHub workflow for building PRs.",
        "name": "buildWorkflow",
        "optional": true,
        "path": Array [
          "buildWorkflow",
        ],
        "switch": "build-workflow",
        "type": "boolean",
      },
      Object {
        "name": "bundledDependencies",
        "optional": true,
        "path": Array [
          "bundledDependencies",
        ],
        "switch": "bundled-dependencies",
        "type": "unknown",
      },
      Object {
        "default": "defaults to the value of authorName or \\"\\" if \`authorName\` is undefined.",
        "docs": "License copyright owner.",
        "name": "copyrightOwner",
        "optional": true,
        "path": Array [
          "copyrightOwner",
        ],
        "switch": "copyright-owner",
        "type": "string",
      },
      Object {
        "default": "current year",
        "docs": "The copyright years to put in the LICENSE file.",
        "name": "copyrightPeriod",
        "optional": true,
        "path": Array [
          "copyrightPeriod",
        ],
        "switch": "copyright-period",
        "type": "string",
      },
      Object {
        "default": "true;",
        "docs": "Include dependabot configuration.",
        "name": "dependabot",
        "optional": true,
        "path": Array [
          "dependabot",
        ],
        "switch": "dependabot",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Automatically merge dependabot PRs if build CI build passes.",
        "name": "autoMerge",
        "optional": true,
        "path": Array [
          "dependabotOptions",
          "autoMerge",
        ],
        "switch": "dependabot-options-auto-merge",
        "type": "boolean",
      },
      Object {
        "name": "dependencies",
        "optional": true,
        "path": Array [
          "dependencies",
        ],
        "switch": "dependencies",
        "type": "unknown",
      },
      Object {
        "docs": "The description is just a string that helps people understand the purpose of the package.",
        "name": "description",
        "optional": true,
        "path": Array [
          "description",
        ],
        "switch": "description",
        "type": "string",
      },
      Object {
        "name": "devDependencies",
        "optional": true,
        "path": Array [
          "devDependencies",
        ],
        "switch": "dev-dependencies",
        "type": "unknown",
      },
      Object {
        "docs": "Additional entries to .gitignore.",
        "name": "gitignore",
        "optional": true,
        "path": Array [
          "gitignore",
        ],
        "switch": "gitignore",
        "type": "unknown",
      },
      Object {
        "docs": "Package's Homepage / Website.",
        "name": "homepage",
        "optional": true,
        "path": Array [
          "homepage",
        ],
        "switch": "homepage",
        "type": "string",
      },
      Object {
        "name": "keywords",
        "optional": true,
        "path": Array [
          "keywords",
        ],
        "switch": "keywords",
        "type": "unknown",
      },
      Object {
        "default": "\\"lib\\"",
        "docs": "Compiler artifacts output directory.",
        "name": "libdir",
        "optional": true,
        "path": Array [
          "libdir",
        ],
        "switch": "libdir",
        "type": "string",
      },
      Object {
        "docs": "License's SPDX identifier.",
        "name": "license",
        "optional": true,
        "path": Array [
          "license",
        ],
        "switch": "license",
        "type": "string",
      },
      Object {
        "default": "no max",
        "docs": "Minimum node.js version to require via \`engines\` (inclusive).",
        "name": "maxNodeVersion",
        "optional": true,
        "path": Array [
          "maxNodeVersion",
        ],
        "switch": "max-node-version",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Adds mergify configuration.",
        "name": "mergify",
        "optional": true,
        "path": Array [
          "mergify",
        ],
        "switch": "mergify",
        "type": "boolean",
      },
      Object {
        "name": "rules",
        "optional": true,
        "path": Array [
          "mergifyOptions",
          "rules",
        ],
        "switch": "mergify-options-rules",
        "type": "unknown",
      },
      Object {
        "default": "no \\"engines\\" specified",
        "docs": "Node.js version to require via package.json \`engines\` (inclusive).",
        "name": "minNodeVersion",
        "optional": true,
        "path": Array [
          "minNodeVersion",
        ],
        "switch": "min-node-version",
        "type": "string",
      },
      Object {
        "docs": "This is the name of your package.",
        "name": "name",
        "path": Array [
          "name",
        ],
        "switch": "name",
        "type": "string",
      },
      Object {
        "default": "\\"latest\\"",
        "docs": "The dist-tag to use when releasing to npm.",
        "name": "npmDistTag",
        "optional": true,
        "path": Array [
          "npmDistTag",
        ],
        "switch": "npm-dist-tag",
        "type": "string",
      },
      Object {
        "docs": "Additional entries to .npmignore.",
        "name": "npmignore",
        "optional": true,
        "path": Array [
          "npmignore",
        ],
        "switch": "npmignore",
        "type": "unknown",
      },
      Object {
        "name": "peerDependencies",
        "optional": true,
        "path": Array [
          "peerDependencies",
        ],
        "switch": "peer-dependencies",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Automatically add a pinned dev dependency.",
        "name": "pinnedDevDependency",
        "optional": true,
        "path": Array [
          "peerDependencyOptions",
          "pinnedDevDependency",
        ],
        "switch": "peer-dependency-options-pinned-dev-dependency",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Indicates of \\"projen\\" should be installed as a devDependency.",
        "name": "projenDevDependency",
        "optional": true,
        "path": Array [
          "projenDevDependency",
        ],
        "switch": "projen-dev-dependency",
        "type": "boolean",
      },
      Object {
        "name": "mode",
        "optional": true,
        "path": Array [
          "projenVersion",
          "mode",
        ],
        "switch": "projen-version-mode",
        "type": "string",
      },
      Object {
        "name": "spec",
        "optional": true,
        "path": Array [
          "projenVersion",
          "spec",
        ],
        "switch": "projen-version-spec",
        "type": "string",
      },
      Object {
        "name": "version",
        "optional": true,
        "path": Array [
          "projenVersion",
          "version",
        ],
        "switch": "projen-version-version",
        "type": "string",
      },
      Object {
        "default": "[ \\"master\\" ]",
        "docs": "Branches which trigger a release.",
        "name": "releaseBranches",
        "optional": true,
        "path": Array [
          "releaseBranches",
        ],
        "switch": "release-branches",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Automatically release new versions every commit to one of branches in \`releaseBranches\`.",
        "name": "releaseEveryCommit",
        "optional": true,
        "path": Array [
          "releaseEveryCommit",
        ],
        "switch": "release-every-commit",
        "type": "boolean",
      },
      Object {
        "default": "no scheduled releases",
        "docs": "CRON schedule to trigger new releases.",
        "name": "releaseSchedule",
        "optional": true,
        "path": Array [
          "releaseSchedule",
        ],
        "switch": "release-schedule",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Automatically release to npm when new versions are introduced.",
        "name": "releaseToNpm",
        "optional": true,
        "path": Array [
          "releaseToNpm",
        ],
        "switch": "release-to-npm",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Define a GitHub workflow for releasing from \\"master\\" when new versions are bumped.",
        "name": "releaseWorkflow",
        "optional": true,
        "path": Array [
          "releaseWorkflow",
        ],
        "switch": "release-workflow",
        "type": "boolean",
      },
      Object {
        "docs": "The repository is the location where the actual code for your package lives.",
        "name": "repository",
        "optional": true,
        "path": Array [
          "repository",
        ],
        "switch": "repository",
        "type": "string",
      },
      Object {
        "docs": "If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.",
        "name": "repositoryDirectory",
        "optional": true,
        "path": Array [
          "repositoryDirectory",
        ],
        "switch": "repository-directory",
        "type": "string",
      },
      Object {
        "default": "{}",
        "docs": "npm scripts to include.",
        "name": "scripts",
        "optional": true,
        "path": Array [
          "scripts",
        ],
        "switch": "scripts",
        "type": "unknown",
      },
      Object {
        "default": "\\"src\\"",
        "docs": "Typescript sources directory.",
        "name": "srcdir",
        "optional": true,
        "path": Array [
          "srcdir",
        ],
        "switch": "srcdir",
        "type": "string",
      },
      Object {
        "docs": "Package's Stability.",
        "name": "stability",
        "optional": true,
        "path": Array [
          "stability",
        ],
        "switch": "stability",
        "type": "string",
      },
      Object {
        "default": "\\"test\\"",
        "docs": "Tests directory.",
        "name": "testdir",
        "optional": true,
        "path": Array [
          "testdir",
        ],
        "switch": "testdir",
        "type": "string",
      },
      Object {
        "default": "[ { run: \`npx projen\${PROJEN_VERSION}\` }, { run: 'yarn install --frozen-lockfile' } ]",
        "docs": "Workflow steps to use in order to bootstrap this repo.",
        "name": "workflowBootstrapSteps",
        "optional": true,
        "path": Array [
          "workflowBootstrapSteps",
        ],
        "switch": "workflow-bootstrap-steps",
        "type": "unknown",
      },
      Object {
        "default": "default image",
        "docs": "Container image to use for GitHub workflows.",
        "name": "workflowContainerImage",
        "optional": true,
        "path": Array [
          "workflowContainerImage",
        ],
        "switch": "workflow-container-image",
        "type": "string",
      },
      Object {
        "default": "same as \`minNodeVersion\`",
        "docs": "The node version to use in GitHub workflows.",
        "name": "workflowNodeVersion",
        "optional": true,
        "path": Array [
          "workflowNodeVersion",
        ],
        "switch": "workflow-node-version",
        "type": "string",
      },
    ],
    "pjid": "node",
    "typename": "NodeProject",
  },
  Object {
    "docs": undefined,
    "fqn": "projen.Project",
    "options": Array [],
    "pjid": "project",
    "typename": "Project",
  },
  Object {
    "docs": "typescript project.",
    "fqn": "projen.TypeScriptProject",
    "options": Array [
      Object {
        "default": "true",
        "docs": "Checks that after build there are no modified files onn git.",
        "name": "antitamper",
        "optional": true,
        "path": Array [
          "antitamper",
        ],
        "switch": "antitamper",
        "type": "boolean",
      },
      Object {
        "docs": "Author's e-mail.",
        "name": "authorEmail",
        "optional": true,
        "path": Array [
          "authorEmail",
        ],
        "switch": "author-email",
        "type": "string",
      },
      Object {
        "docs": "Author's name.",
        "name": "authorName",
        "optional": true,
        "path": Array [
          "authorName",
        ],
        "switch": "author-name",
        "type": "string",
      },
      Object {
        "docs": "Author's Organization.",
        "name": "authorOrganization",
        "optional": true,
        "path": Array [
          "authorOrganization",
        ],
        "switch": "author-organization",
        "type": "boolean",
      },
      Object {
        "docs": "Author's URL / Website.",
        "name": "authorUrl",
        "optional": true,
        "path": Array [
          "authorUrl",
        ],
        "switch": "author-url",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Automatically add all executables under the \`bin\` directory to your \`package.json\` file under the \`bin\` section.",
        "name": "autoDetectBin",
        "optional": true,
        "path": Array [
          "autoDetectBin",
        ],
        "switch": "auto-detect-bin",
        "type": "boolean",
      },
      Object {
        "default": "every 6 hours",
        "docs": "CRON schedule for automatically bumping and releasing a new version.",
        "name": "autoReleaseSchedule",
        "optional": true,
        "path": Array [
          "autoReleaseSchedule",
        ],
        "switch": "auto-release-schedule",
        "type": "string",
      },
      Object {
        "docs": "Binary programs vended with your module.",
        "name": "bin",
        "optional": true,
        "path": Array [
          "bin",
        ],
        "switch": "bin",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Define a GitHub workflow for building PRs.",
        "name": "buildWorkflow",
        "optional": true,
        "path": Array [
          "buildWorkflow",
        ],
        "switch": "build-workflow",
        "type": "boolean",
      },
      Object {
        "name": "bundledDependencies",
        "optional": true,
        "path": Array [
          "bundledDependencies",
        ],
        "switch": "bundled-dependencies",
        "type": "unknown",
      },
      Object {
        "default": "the default behavior is to delete the lib/ directory and run
jest typescript tests and only if all tests pass, run the compiler.",
        "docs": "Compile the code before running tests.",
        "name": "compileBeforeTest",
        "optional": true,
        "path": Array [
          "compileBeforeTest",
        ],
        "switch": "compile-before-test",
        "type": "boolean",
      },
      Object {
        "default": "defaults to the value of authorName or \\"\\" if \`authorName\` is undefined.",
        "docs": "License copyright owner.",
        "name": "copyrightOwner",
        "optional": true,
        "path": Array [
          "copyrightOwner",
        ],
        "switch": "copyright-owner",
        "type": "string",
      },
      Object {
        "default": "current year",
        "docs": "The copyright years to put in the LICENSE file.",
        "name": "copyrightPeriod",
        "optional": true,
        "path": Array [
          "copyrightPeriod",
        ],
        "switch": "copyright-period",
        "type": "string",
      },
      Object {
        "default": "true;",
        "docs": "Include dependabot configuration.",
        "name": "dependabot",
        "optional": true,
        "path": Array [
          "dependabot",
        ],
        "switch": "dependabot",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Automatically merge dependabot PRs if build CI build passes.",
        "name": "autoMerge",
        "optional": true,
        "path": Array [
          "dependabotOptions",
          "autoMerge",
        ],
        "switch": "dependabot-options-auto-merge",
        "type": "boolean",
      },
      Object {
        "name": "dependencies",
        "optional": true,
        "path": Array [
          "dependencies",
        ],
        "switch": "dependencies",
        "type": "unknown",
      },
      Object {
        "docs": "The description is just a string that helps people understand the purpose of the package.",
        "name": "description",
        "optional": true,
        "path": Array [
          "description",
        ],
        "switch": "description",
        "type": "string",
      },
      Object {
        "name": "devDependencies",
        "optional": true,
        "path": Array [
          "devDependencies",
        ],
        "switch": "dev-dependencies",
        "type": "unknown",
      },
      Object {
        "default": "false",
        "docs": "Do not generate a \`tsconfig.json\` file (used by jsii projects since tsconfig.json is generated by the jsii compiler).",
        "name": "disableTsconfig",
        "optional": true,
        "path": Array [
          "disableTsconfig",
        ],
        "switch": "disable-tsconfig",
        "type": "boolean",
      },
      Object {
        "default": "false",
        "docs": "Docgen by Typedoc.",
        "name": "docgen",
        "optional": true,
        "path": Array [
          "docgen",
        ],
        "switch": "docgen",
        "type": "boolean",
      },
      Object {
        "default": "'docs'",
        "docs": "Docs directory.",
        "name": "docsDirectory",
        "optional": true,
        "path": Array [
          "docsDirectory",
        ],
        "switch": "docs-directory",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Setup eslint.",
        "name": "eslint",
        "optional": true,
        "path": Array [
          "eslint",
        ],
        "switch": "eslint",
        "type": "boolean",
      },
      Object {
        "docs": "Additional entries to .gitignore.",
        "name": "gitignore",
        "optional": true,
        "path": Array [
          "gitignore",
        ],
        "switch": "gitignore",
        "type": "unknown",
      },
      Object {
        "docs": "Package's Homepage / Website.",
        "name": "homepage",
        "optional": true,
        "path": Array [
          "homepage",
        ],
        "switch": "homepage",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Setup jest unit tests.",
        "name": "jest",
        "optional": true,
        "path": Array [
          "jest",
        ],
        "switch": "jest",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Collect coverage.",
        "name": "coverage",
        "optional": true,
        "path": Array [
          "jestOptions",
          "coverage",
        ],
        "switch": "jest-options-coverage",
        "type": "boolean",
      },
      Object {
        "name": "branches",
        "optional": true,
        "path": Array [
          "jestOptions",
          "coverageThreshold",
          "branches",
        ],
        "switch": "jest-options-coverage-threshold-branches",
        "type": "number",
      },
      Object {
        "name": "functions",
        "optional": true,
        "path": Array [
          "jestOptions",
          "coverageThreshold",
          "functions",
        ],
        "switch": "jest-options-coverage-threshold-functions",
        "type": "number",
      },
      Object {
        "name": "lines",
        "optional": true,
        "path": Array [
          "jestOptions",
          "coverageThreshold",
          "lines",
        ],
        "switch": "jest-options-coverage-threshold-lines",
        "type": "number",
      },
      Object {
        "name": "statements",
        "optional": true,
        "path": Array [
          "jestOptions",
          "coverageThreshold",
          "statements",
        ],
        "switch": "jest-options-coverage-threshold-statements",
        "type": "number",
      },
      Object {
        "default": "\\"/node_modules/\\"",
        "docs": "Defines \`testPathIgnorePatterns\` and \`coveragePathIgnorePatterns\`.",
        "name": "ignorePatterns",
        "optional": true,
        "path": Array [
          "jestOptions",
          "ignorePatterns",
        ],
        "switch": "jest-options-ignore-patterns",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.",
        "name": "alwaysStrict",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "alwaysStrict",
        ],
        "switch": "jest-options-typescript-compiler-options-always-strict",
        "type": "boolean",
      },
      Object {
        "docs": "To be specified along with the above.",
        "name": "declaration",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "declaration",
        ],
        "switch": "jest-options-typescript-compiler-options-declaration",
        "type": "boolean",
      },
      Object {
        "docs": "Offers a way to configure the root directory for where declaration files are emitted.",
        "name": "declarationDir",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "declarationDir",
        ],
        "switch": "jest-options-typescript-compiler-options-declaration-dir",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Enables experimental support for decorators, which is in stage 2 of the TC39 standardization process.",
        "name": "experimentalDecorators",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "experimentalDecorators",
        ],
        "switch": "jest-options-typescript-compiler-options-experimental-decorators",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When set, instead of writing out a .js.map file to provide source maps, TypeScript will embed the source map content in the .js files.",
        "name": "inlineSourceMap",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "inlineSourceMap",
        ],
        "switch": "jest-options-typescript-compiler-options-inline-source-map",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When set, TypeScript will include the original content of the .ts file as an embedded string in the source map. This is often useful in the same cases as inlineSourceMap.",
        "name": "inlineSources",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "inlineSources",
        ],
        "switch": "jest-options-typescript-compiler-options-inline-sources",
        "type": "boolean",
      },
      Object {
        "default": "[ 'es2018' ]",
        "docs": "Reference for type definitions / libraries to use (eg.",
        "name": "lib",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "lib",
        ],
        "switch": "jest-options-typescript-compiler-options-lib",
        "type": "unknown",
      },
      Object {
        "default": "'CommonJS'",
        "docs": "Sets the module system for the program.",
        "name": "module",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "module",
        ],
        "switch": "jest-options-typescript-compiler-options-module",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.",
        "name": "noEmitOnError",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noEmitOnError",
        ],
        "switch": "jest-options-typescript-compiler-options-no-emit-on-error",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Report errors for fallthrough cases in switch statements.",
        "name": "noFallthroughCasesInSwitch",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noFallthroughCasesInSwitch",
        ],
        "switch": "jest-options-typescript-compiler-options-no-fallthrough-cases-in-switch",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.",
        "name": "noImplicitAny",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noImplicitAny",
        ],
        "switch": "jest-options-typescript-compiler-options-no-implicit-any",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When enabled, TypeScript will check all code paths in a function to ensure they return a value.",
        "name": "noImplicitReturns",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noImplicitReturns",
        ],
        "switch": "jest-options-typescript-compiler-options-no-implicit-returns",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Raise error on ‘this’ expressions with an implied ‘any’ type.",
        "name": "noImplicitThis",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noImplicitThis",
        ],
        "switch": "jest-options-typescript-compiler-options-no-implicit-this",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Report errors on unused local variables.",
        "name": "noUnusedLocals",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noUnusedLocals",
        ],
        "switch": "jest-options-typescript-compiler-options-no-unused-locals",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Report errors on unused parameters in functions.",
        "name": "noUnusedParameters",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "noUnusedParameters",
        ],
        "switch": "jest-options-typescript-compiler-options-no-unused-parameters",
        "type": "boolean",
      },
      Object {
        "docs": "Output directory for the compiled files.",
        "name": "outDir",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "outDir",
        ],
        "switch": "jest-options-typescript-compiler-options-out-dir",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes generating a type for the import based on the static JSON shape.",
        "name": "resolveJsonModule",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "resolveJsonModule",
        ],
        "switch": "jest-options-typescript-compiler-options-resolve-json-module",
        "type": "boolean",
      },
      Object {
        "docs": "Specifies the root directory of input files.",
        "name": "rootDir",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "rootDir",
        ],
        "switch": "jest-options-typescript-compiler-options-root-dir",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.",
        "name": "strict",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "strict",
        ],
        "switch": "jest-options-typescript-compiler-options-strict",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When strictNullChecks is false, null and undefined are effectively ignored by the language.",
        "name": "strictNullChecks",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "strictNullChecks",
        ],
        "switch": "jest-options-typescript-compiler-options-strict-null-checks",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.",
        "name": "strictPropertyInitialization",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "strictPropertyInitialization",
        ],
        "switch": "jest-options-typescript-compiler-options-strict-property-initialization",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Do not emit declarations for code that has an @internal annotation in it’s JSDoc comment.",
        "name": "stripInternal",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "stripInternal",
        ],
        "switch": "jest-options-typescript-compiler-options-strip-internal",
        "type": "boolean",
      },
      Object {
        "default": "'ES2018'",
        "docs": "Modern browsers support all ES6 features, so ES6 is a good choice.",
        "name": "target",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "compilerOptions",
          "target",
        ],
        "switch": "jest-options-typescript-compiler-options-target",
        "type": "string",
      },
      Object {
        "name": "exclude",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "exclude",
        ],
        "switch": "jest-options-typescript-exclude",
        "type": "unknown",
      },
      Object {
        "name": "fileName",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "fileName",
        ],
        "switch": "jest-options-typescript-file-name",
        "type": "string",
      },
      Object {
        "name": "include",
        "optional": true,
        "path": Array [
          "jestOptions",
          "typescript",
          "include",
        ],
        "switch": "jest-options-typescript-include",
        "type": "unknown",
      },
      Object {
        "name": "keywords",
        "optional": true,
        "path": Array [
          "keywords",
        ],
        "switch": "keywords",
        "type": "unknown",
      },
      Object {
        "default": "\\"lib\\"",
        "docs": "Compiler artifacts output directory.",
        "name": "libdir",
        "optional": true,
        "path": Array [
          "libdir",
        ],
        "switch": "libdir",
        "type": "string",
      },
      Object {
        "docs": "License's SPDX identifier.",
        "name": "license",
        "optional": true,
        "path": Array [
          "license",
        ],
        "switch": "license",
        "type": "string",
      },
      Object {
        "default": "no max",
        "docs": "Minimum node.js version to require via \`engines\` (inclusive).",
        "name": "maxNodeVersion",
        "optional": true,
        "path": Array [
          "maxNodeVersion",
        ],
        "switch": "max-node-version",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Adds mergify configuration.",
        "name": "mergify",
        "optional": true,
        "path": Array [
          "mergify",
        ],
        "switch": "mergify",
        "type": "boolean",
      },
      Object {
        "name": "rules",
        "optional": true,
        "path": Array [
          "mergifyOptions",
          "rules",
        ],
        "switch": "mergify-options-rules",
        "type": "unknown",
      },
      Object {
        "default": "no \\"engines\\" specified",
        "docs": "Node.js version to require via package.json \`engines\` (inclusive).",
        "name": "minNodeVersion",
        "optional": true,
        "path": Array [
          "minNodeVersion",
        ],
        "switch": "min-node-version",
        "type": "string",
      },
      Object {
        "docs": "This is the name of your package.",
        "name": "name",
        "path": Array [
          "name",
        ],
        "switch": "name",
        "type": "string",
      },
      Object {
        "default": "\\"latest\\"",
        "docs": "The dist-tag to use when releasing to npm.",
        "name": "npmDistTag",
        "optional": true,
        "path": Array [
          "npmDistTag",
        ],
        "switch": "npm-dist-tag",
        "type": "string",
      },
      Object {
        "docs": "Additional entries to .npmignore.",
        "name": "npmignore",
        "optional": true,
        "path": Array [
          "npmignore",
        ],
        "switch": "npmignore",
        "type": "unknown",
      },
      Object {
        "name": "peerDependencies",
        "optional": true,
        "path": Array [
          "peerDependencies",
        ],
        "switch": "peer-dependencies",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Automatically add a pinned dev dependency.",
        "name": "pinnedDevDependency",
        "optional": true,
        "path": Array [
          "peerDependencyOptions",
          "pinnedDevDependency",
        ],
        "switch": "peer-dependency-options-pinned-dev-dependency",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Indicates of \\"projen\\" should be installed as a devDependency.",
        "name": "projenDevDependency",
        "optional": true,
        "path": Array [
          "projenDevDependency",
        ],
        "switch": "projen-dev-dependency",
        "type": "boolean",
      },
      Object {
        "name": "mode",
        "optional": true,
        "path": Array [
          "projenVersion",
          "mode",
        ],
        "switch": "projen-version-mode",
        "type": "string",
      },
      Object {
        "name": "spec",
        "optional": true,
        "path": Array [
          "projenVersion",
          "spec",
        ],
        "switch": "projen-version-spec",
        "type": "string",
      },
      Object {
        "name": "version",
        "optional": true,
        "path": Array [
          "projenVersion",
          "version",
        ],
        "switch": "projen-version-version",
        "type": "string",
      },
      Object {
        "default": "[ \\"master\\" ]",
        "docs": "Branches which trigger a release.",
        "name": "releaseBranches",
        "optional": true,
        "path": Array [
          "releaseBranches",
        ],
        "switch": "release-branches",
        "type": "unknown",
      },
      Object {
        "default": "true",
        "docs": "Automatically release new versions every commit to one of branches in \`releaseBranches\`.",
        "name": "releaseEveryCommit",
        "optional": true,
        "path": Array [
          "releaseEveryCommit",
        ],
        "switch": "release-every-commit",
        "type": "boolean",
      },
      Object {
        "default": "no scheduled releases",
        "docs": "CRON schedule to trigger new releases.",
        "name": "releaseSchedule",
        "optional": true,
        "path": Array [
          "releaseSchedule",
        ],
        "switch": "release-schedule",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Automatically release to npm when new versions are introduced.",
        "name": "releaseToNpm",
        "optional": true,
        "path": Array [
          "releaseToNpm",
        ],
        "switch": "release-to-npm",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Define a GitHub workflow for releasing from \\"master\\" when new versions are bumped.",
        "name": "releaseWorkflow",
        "optional": true,
        "path": Array [
          "releaseWorkflow",
        ],
        "switch": "release-workflow",
        "type": "boolean",
      },
      Object {
        "docs": "The repository is the location where the actual code for your package lives.",
        "name": "repository",
        "optional": true,
        "path": Array [
          "repository",
        ],
        "switch": "repository",
        "type": "string",
      },
      Object {
        "docs": "If the package.json for your package is not in the root directory (for example if it is part of a monorepo), you can specify the directory in which it lives.",
        "name": "repositoryDirectory",
        "optional": true,
        "path": Array [
          "repositoryDirectory",
        ],
        "switch": "repository-directory",
        "type": "string",
      },
      Object {
        "default": "{}",
        "docs": "npm scripts to include.",
        "name": "scripts",
        "optional": true,
        "path": Array [
          "scripts",
        ],
        "switch": "scripts",
        "type": "unknown",
      },
      Object {
        "default": "\\"src\\"",
        "docs": "Typescript sources directory.",
        "name": "srcdir",
        "optional": true,
        "path": Array [
          "srcdir",
        ],
        "switch": "srcdir",
        "type": "string",
      },
      Object {
        "docs": "Package's Stability.",
        "name": "stability",
        "optional": true,
        "path": Array [
          "stability",
        ],
        "switch": "stability",
        "type": "string",
      },
      Object {
        "default": "\\"test\\"",
        "docs": "Tests directory.",
        "name": "testdir",
        "optional": true,
        "path": Array [
          "testdir",
        ],
        "switch": "testdir",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Ensures that your files are parsed in the ECMAScript strict mode, and emit “use strict” for each source file.",
        "name": "alwaysStrict",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "alwaysStrict",
        ],
        "switch": "tsconfig-compiler-options-always-strict",
        "type": "boolean",
      },
      Object {
        "docs": "To be specified along with the above.",
        "name": "declaration",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "declaration",
        ],
        "switch": "tsconfig-compiler-options-declaration",
        "type": "boolean",
      },
      Object {
        "docs": "Offers a way to configure the root directory for where declaration files are emitted.",
        "name": "declarationDir",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "declarationDir",
        ],
        "switch": "tsconfig-compiler-options-declaration-dir",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Enables experimental support for decorators, which is in stage 2 of the TC39 standardization process.",
        "name": "experimentalDecorators",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "experimentalDecorators",
        ],
        "switch": "tsconfig-compiler-options-experimental-decorators",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When set, instead of writing out a .js.map file to provide source maps, TypeScript will embed the source map content in the .js files.",
        "name": "inlineSourceMap",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "inlineSourceMap",
        ],
        "switch": "tsconfig-compiler-options-inline-source-map",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When set, TypeScript will include the original content of the .ts file as an embedded string in the source map. This is often useful in the same cases as inlineSourceMap.",
        "name": "inlineSources",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "inlineSources",
        ],
        "switch": "tsconfig-compiler-options-inline-sources",
        "type": "boolean",
      },
      Object {
        "default": "[ 'es2018' ]",
        "docs": "Reference for type definitions / libraries to use (eg.",
        "name": "lib",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "lib",
        ],
        "switch": "tsconfig-compiler-options-lib",
        "type": "unknown",
      },
      Object {
        "default": "'CommonJS'",
        "docs": "Sets the module system for the program.",
        "name": "module",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "module",
        ],
        "switch": "tsconfig-compiler-options-module",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Do not emit compiler output files like JavaScript source code, source-maps or declarations if any errors were reported.",
        "name": "noEmitOnError",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "noEmitOnError",
        ],
        "switch": "tsconfig-compiler-options-no-emit-on-error",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Report errors for fallthrough cases in switch statements.",
        "name": "noFallthroughCasesInSwitch",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "noFallthroughCasesInSwitch",
        ],
        "switch": "tsconfig-compiler-options-no-fallthrough-cases-in-switch",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "In some cases where no type annotations are present, TypeScript will fall back to a type of any for a variable when it cannot infer the type.",
        "name": "noImplicitAny",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "noImplicitAny",
        ],
        "switch": "tsconfig-compiler-options-no-implicit-any",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When enabled, TypeScript will check all code paths in a function to ensure they return a value.",
        "name": "noImplicitReturns",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "noImplicitReturns",
        ],
        "switch": "tsconfig-compiler-options-no-implicit-returns",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Raise error on ‘this’ expressions with an implied ‘any’ type.",
        "name": "noImplicitThis",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "noImplicitThis",
        ],
        "switch": "tsconfig-compiler-options-no-implicit-this",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Report errors on unused local variables.",
        "name": "noUnusedLocals",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "noUnusedLocals",
        ],
        "switch": "tsconfig-compiler-options-no-unused-locals",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Report errors on unused parameters in functions.",
        "name": "noUnusedParameters",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "noUnusedParameters",
        ],
        "switch": "tsconfig-compiler-options-no-unused-parameters",
        "type": "boolean",
      },
      Object {
        "docs": "Output directory for the compiled files.",
        "name": "outDir",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "outDir",
        ],
        "switch": "tsconfig-compiler-options-out-dir",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "Allows importing modules with a ‘.json’ extension, which is a common practice in node projects. This includes generating a type for the import based on the static JSON shape.",
        "name": "resolveJsonModule",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "resolveJsonModule",
        ],
        "switch": "tsconfig-compiler-options-resolve-json-module",
        "type": "boolean",
      },
      Object {
        "docs": "Specifies the root directory of input files.",
        "name": "rootDir",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "rootDir",
        ],
        "switch": "tsconfig-compiler-options-root-dir",
        "type": "string",
      },
      Object {
        "default": "true",
        "docs": "The strict flag enables a wide range of type checking behavior that results in stronger guarantees of program correctness.",
        "name": "strict",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "strict",
        ],
        "switch": "tsconfig-compiler-options-strict",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When strictNullChecks is false, null and undefined are effectively ignored by the language.",
        "name": "strictNullChecks",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "strictNullChecks",
        ],
        "switch": "tsconfig-compiler-options-strict-null-checks",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "When set to true, TypeScript will raise an error when a class property was declared but not set in the constructor.",
        "name": "strictPropertyInitialization",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "strictPropertyInitialization",
        ],
        "switch": "tsconfig-compiler-options-strict-property-initialization",
        "type": "boolean",
      },
      Object {
        "default": "true",
        "docs": "Do not emit declarations for code that has an @internal annotation in it’s JSDoc comment.",
        "name": "stripInternal",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "stripInternal",
        ],
        "switch": "tsconfig-compiler-options-strip-internal",
        "type": "boolean",
      },
      Object {
        "default": "'ES2018'",
        "docs": "Modern browsers support all ES6 features, so ES6 is a good choice.",
        "name": "target",
        "optional": true,
        "path": Array [
          "tsconfig",
          "compilerOptions",
          "target",
        ],
        "switch": "tsconfig-compiler-options-target",
        "type": "string",
      },
      Object {
        "default": "node_modules is excluded by default",
        "name": "exclude",
        "optional": true,
        "path": Array [
          "tsconfig",
          "exclude",
        ],
        "switch": "tsconfig-exclude",
        "type": "unknown",
      },
      Object {
        "default": "\\"tsconfig.json\\"",
        "name": "fileName",
        "optional": true,
        "path": Array [
          "tsconfig",
          "fileName",
        ],
        "switch": "tsconfig-file-name",
        "type": "string",
      },
      Object {
        "default": "all .ts files recursively",
        "docs": "The directory in which typescript sources reside.",
        "name": "include",
        "optional": true,
        "path": Array [
          "tsconfig",
          "include",
        ],
        "switch": "tsconfig-include",
        "type": "unknown",
      },
      Object {
        "name": "mode",
        "optional": true,
        "path": Array [
          "typescriptVersion",
          "mode",
        ],
        "switch": "typescript-version-mode",
        "type": "string",
      },
      Object {
        "name": "spec",
        "optional": true,
        "path": Array [
          "typescriptVersion",
          "spec",
        ],
        "switch": "typescript-version-spec",
        "type": "string",
      },
      Object {
        "name": "version",
        "optional": true,
        "path": Array [
          "typescriptVersion",
          "version",
        ],
        "switch": "typescript-version-version",
        "type": "string",
      },
      Object {
        "default": "[ { run: \`npx projen\${PROJEN_VERSION}\` }, { run: 'yarn install --frozen-lockfile' } ]",
        "docs": "Workflow steps to use in order to bootstrap this repo.",
        "name": "workflowBootstrapSteps",
        "optional": true,
        "path": Array [
          "workflowBootstrapSteps",
        ],
        "switch": "workflow-bootstrap-steps",
        "type": "unknown",
      },
      Object {
        "default": "default image",
        "docs": "Container image to use for GitHub workflows.",
        "name": "workflowContainerImage",
        "optional": true,
        "path": Array [
          "workflowContainerImage",
        ],
        "switch": "workflow-container-image",
        "type": "string",
      },
      Object {
        "default": "same as \`minNodeVersion\`",
        "docs": "The node version to use in GitHub workflows.",
        "name": "workflowNodeVersion",
        "optional": true,
        "path": Array [
          "workflowNodeVersion",
        ],
        "switch": "workflow-node-version",
        "type": "string",
      },
    ],
    "pjid": "ts",
    "typename": "TypeScriptProject",
  },
]
`;
