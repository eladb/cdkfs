// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`auto-discover 1`] = `
"// ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
import * as path from 'path';
import * as lambda from '@aws-cdk/aws-lambda';
import { Construct } from '@aws-cdk/core';

/**
 * Props for HelloFunction
 */
export interface HelloFunctionProps extends lambda.FunctionOptions {
}

/**
 * An AWS Lambda function which executes hello.
 */
export class HelloFunction extends lambda.Function {
  constructor(scope: Construct, id: string, props?: HelloFunctionProps) {
    super(scope, id, {
      description: 'hello.lambda.ts',
      ...props,
      runtime: lambda.Runtime.NODEJS_12_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, 'hello.bundle')),
    });
  }
}"
`;

exports[`auto-discover 2`] = `
"// ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
import * as path from 'path';
import * as lambda from '@aws-cdk/aws-lambda';
import { Construct } from '@aws-cdk/core';

/**
 * Props for WorldFunction
 */
export interface WorldFunctionProps extends lambda.FunctionOptions {
}

/**
 * An AWS Lambda function which executes subdir/world.
 */
export class WorldFunction extends lambda.Function {
  constructor(scope: Construct, id: string, props?: WorldFunctionProps) {
    super(scope, id, {
      description: 'subdir/world.lambda.ts',
      ...props,
      runtime: lambda.Runtime.NODEJS_12_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, 'subdir/world.bundle')),
    });
  }
}"
`;

exports[`auto-discover 3`] = `
"// ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
import * as path from 'path';
import * as lambda from '@aws-cdk/aws-lambda';
import { Construct } from '@aws-cdk/core';

/**
 * Props for JangyFunction
 */
export interface JangyFunctionProps extends lambda.FunctionOptions {
}

/**
 * An AWS Lambda function which executes subdir/jangy.
 */
export class JangyFunction extends lambda.Function {
  constructor(scope: Construct, id: string, props?: JangyFunctionProps) {
    super(scope, id, {
      description: 'subdir/jangy.lambda.ts',
      ...props,
      runtime: lambda.Runtime.NODEJS_12_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, 'subdir/jangy.bundle')),
    });
  }
}"
`;

exports[`auto-discover 4`] = `
Object {
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
  "env": Object {
    "PATH": "$(npx -c \\"node -e \\\\\\"console.log(process.env.PATH)\\\\\\"\\")",
  },
  "tasks": Object {
    "build": Object {
      "description": "Full release build (test+compile)",
      "name": "build",
      "steps": Array [
        Object {
          "exec": "npx projen",
        },
        Object {
          "spawn": "test",
        },
        Object {
          "spawn": "compile",
        },
        Object {
          "spawn": "package",
        },
      ],
    },
    "bump": Object {
      "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
      "description": "Bumps version based on latest git tag and generates a changelog entry",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
      },
      "name": "bump",
      "steps": Array [
        Object {
          "builtin": "release/bump-version",
        },
      ],
    },
    "bundle": Object {
      "description": "Bundle assets",
      "name": "bundle",
      "steps": Array [
        Object {
          "spawn": "bundle:hello",
        },
        Object {
          "spawn": "bundle:subdir/jangy",
        },
        Object {
          "spawn": "bundle:subdir/world",
        },
      ],
    },
    "bundle:hello": Object {
      "description": "Create a JavaScript bundle from src/hello.lambda.ts",
      "name": "bundle:hello",
      "steps": Array [
        Object {
          "exec": "esbuild --bundle src/hello.lambda.ts --target=\\"node12\\" --platform=\\"node\\" --outfile=\\"lib/hello.bundle/index.js\\" --external:aws-sdk",
        },
      ],
    },
    "bundle:subdir/jangy": Object {
      "description": "Create a JavaScript bundle from src/subdir/jangy.lambda.ts",
      "name": "bundle:subdir/jangy",
      "steps": Array [
        Object {
          "exec": "esbuild --bundle src/subdir/jangy.lambda.ts --target=\\"node12\\" --platform=\\"node\\" --outfile=\\"lib/subdir/jangy.bundle/index.js\\" --external:aws-sdk",
        },
      ],
    },
    "bundle:subdir/world": Object {
      "description": "Create a JavaScript bundle from src/subdir/world.lambda.ts",
      "name": "bundle:subdir/world",
      "steps": Array [
        Object {
          "exec": "esbuild --bundle src/subdir/world.lambda.ts --target=\\"node12\\" --platform=\\"node\\" --outfile=\\"lib/subdir/world.bundle/index.js\\" --external:aws-sdk",
        },
      ],
    },
    "clobber": Object {
      "condition": "git diff --exit-code > /dev/null",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": Object {
        "BRANCH": "$(git branch --show-current)",
      },
      "name": "clobber",
      "steps": Array [
        Object {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \\"scratch\\" branch",
        },
        Object {
          "exec": "git checkout $BRANCH",
        },
        Object {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin",
        },
        Object {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit",
        },
        Object {
          "exec": "git clean -fdx",
          "name": "clean all untracked files",
        },
        Object {
          "say": "ready to rock! (unpushed commits are under the \\"scratch\\" branch)",
        },
      ],
    },
    "compile": Object {
      "description": "Only compile",
      "name": "compile",
      "steps": Array [
        Object {
          "exec": "tsc --build",
        },
        Object {
          "spawn": "bundle",
        },
      ],
    },
    "default": Object {
      "name": "default",
      "steps": Array [
        Object {
          "exec": "node .projenrc.js",
        },
      ],
    },
    "eslint": Object {
      "description": "Runs eslint against the codebase",
      "name": "eslint",
      "steps": Array [
        Object {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern src test build-tools .projenrc.js",
        },
      ],
    },
    "package": Object {
      "description": "Create an npm tarball",
      "name": "package",
      "steps": Array [
        Object {
          "exec": "mkdir -p dist/js",
        },
        Object {
          "exec": "yarn pack",
        },
        Object {
          "exec": "mv *.tgz dist/js/",
        },
      ],
    },
    "publish:github": Object {
      "description": "Publish this package to GitHub Releases",
      "name": "publish:github",
      "requiredEnv": Array [
        "GITHUB_TOKEN",
        "GITHUB_REPOSITORY",
        "GITHUB_REF",
      ],
      "steps": Array [
        Object {
          "exec": "errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q \\"Release.tag_name already exists\\" $errout; then cat $errout; exit $exitcode; fi",
        },
      ],
    },
    "release": Object {
      "description": "Prepare a release from \\"main\\" branch",
      "env": Object {
        "RELEASE": "true",
      },
      "name": "release",
      "steps": Array [
        Object {
          "exec": "rm -fr dist",
        },
        Object {
          "spawn": "bump",
        },
        Object {
          "spawn": "build",
        },
        Object {
          "spawn": "unbump",
        },
        Object {
          "exec": "git diff --ignore-space-at-eol --exit-code",
        },
      ],
    },
    "test": Object {
      "description": "Run tests",
      "name": "test",
      "steps": Array [
        Object {
          "exec": "rm -fr lib/",
        },
        Object {
          "exec": "jest --passWithNoTests --all --updateSnapshot",
        },
        Object {
          "spawn": "eslint",
        },
      ],
    },
    "test:update": Object {
      "description": "Update jest snapshots",
      "name": "test:update",
      "steps": Array [
        Object {
          "exec": "jest --updateSnapshot",
        },
      ],
    },
    "test:watch": Object {
      "description": "Run jest in watch mode",
      "name": "test:watch",
      "steps": Array [
        Object {
          "exec": "jest --watch",
        },
      ],
    },
    "unbump": Object {
      "description": "Restores version to 0.0.0",
      "env": Object {
        "BUMPFILE": "dist/version.txt",
        "CHANGELOG": "dist/changelog.md",
        "OUTFILE": "package.json",
        "RELEASETAG": "dist/releasetag.txt",
      },
      "name": "unbump",
      "steps": Array [
        Object {
          "builtin": "release/reset-version",
        },
      ],
    },
    "upgrade": Object {
      "description": "upgrade dependencies",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade",
      "steps": Array [
        Object {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --reject='projen'",
        },
        Object {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --reject='projen'",
        },
        Object {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --reject='projen'",
        },
        Object {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --reject='projen'",
        },
        Object {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --reject='projen'",
        },
        Object {
          "exec": "yarn install --check-files",
        },
        Object {
          "exec": "yarn upgrade @types/jest @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser esbuild eslint eslint-import-resolver-node eslint-import-resolver-typescript eslint-plugin-import jest jest-junit json-schema npm-check-updates standard-version ts-jest typescript",
        },
        Object {
          "exec": "npx projen",
        },
      ],
    },
    "upgrade-projen": Object {
      "description": "upgrade projen",
      "env": Object {
        "CI": "0",
      },
      "name": "upgrade-projen",
      "steps": Array [
        Object {
          "exec": "npm-check-updates --dep dev --upgrade --target=minor --filter='projen'",
        },
        Object {
          "exec": "npm-check-updates --dep optional --upgrade --target=minor --filter='projen'",
        },
        Object {
          "exec": "npm-check-updates --dep peer --upgrade --target=minor --filter='projen'",
        },
        Object {
          "exec": "npm-check-updates --dep prod --upgrade --target=minor --filter='projen'",
        },
        Object {
          "exec": "npm-check-updates --dep bundle --upgrade --target=minor --filter='projen'",
        },
        Object {
          "exec": "yarn install --check-files",
        },
        Object {
          "exec": "yarn upgrade projen",
        },
        Object {
          "exec": "npx projen",
        },
      ],
    },
    "watch": Object {
      "description": "Watch & compile in the background",
      "name": "watch",
      "steps": Array [
        Object {
          "exec": "tsc --build -w",
        },
      ],
    },
  },
}
`;

exports[`bundled function generates source code for a lambda construct 1`] = `
"// ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
import * as path from 'path';
import * as lambda from '@aws-cdk/aws-lambda';
import { Construct } from '@aws-cdk/core';

/**
 * Props for HelloFunction
 */
export interface HelloFunctionProps extends lambda.FunctionOptions {
}

/**
 * An AWS Lambda function which executes hello.
 */
export class HelloFunction extends lambda.Function {
  constructor(scope: Construct, id: string, props?: HelloFunctionProps) {
    super(scope, id, {
      description: 'hello.lambda.ts',
      ...props,
      runtime: lambda.Runtime.NODEJS_14_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, 'hello.bundle')),
    });
  }
}"
`;

exports[`constructFile and constructName can be used to customize the generated construct 1`] = `
"// ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
import * as path from 'path';
import * as lambda from '@aws-cdk/aws-lambda';
import { Construct } from '@aws-cdk/core';

/**
 * Props for MyConstruct
 */
export interface MyConstructProps extends lambda.FunctionOptions {
}

/**
 * An AWS Lambda function which executes hello.
 */
export class MyConstruct extends lambda.Function {
  constructor(scope: Construct, id: string, props?: MyConstructProps) {
    super(scope, id, {
      description: 'hello.lambda.ts',
      ...props,
      runtime: lambda.Runtime.NODEJS_14_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, 'hello.bundle')),
    });
  }
}"
`;

exports[`multiple functions 1`] = `
"// ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
import * as path from 'path';
import * as lambda from '@aws-cdk/aws-lambda';
import { Construct } from '@aws-cdk/core';

/**
 * Props for HelloFunction
 */
export interface HelloFunctionProps extends lambda.FunctionOptions {
}

/**
 * An AWS Lambda function which executes hello.
 */
export class HelloFunction extends lambda.Function {
  constructor(scope: Construct, id: string, props?: HelloFunctionProps) {
    super(scope, id, {
      description: 'hello.lambda.ts',
      ...props,
      runtime: lambda.Runtime.NODEJS_14_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, 'hello.bundle')),
    });
  }
}"
`;

exports[`multiple functions 2`] = `
"// ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
import * as path from 'path';
import * as lambda from '@aws-cdk/aws-lambda';
import { Construct } from '@aws-cdk/core';

/**
 * Props for WorldFunction
 */
export interface WorldFunctionProps extends lambda.FunctionOptions {
}

/**
 * An AWS Lambda function which executes world.
 */
export class WorldFunction extends lambda.Function {
  constructor(scope: Construct, id: string, props?: WorldFunctionProps) {
    super(scope, id, {
      description: 'world.lambda.ts',
      ...props,
      runtime: lambda.Runtime.NODEJS_14_X,
      handler: 'index.handler',
      code: lambda.Code.fromAsset(path.join(__dirname, 'world.bundle')),
    });
  }
}"
`;
