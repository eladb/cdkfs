import { readFileSync, writeFileSync } from 'fs';
import { join } from 'path';
import { mkdirpSync } from 'fs-extra';
import * as semver from 'semver';
import { Project } from '../../src';
import { NodePackage } from '../../src/javascript/node-package';
import { mkdtemp, synthSnapshot, TestProject } from '../util';

test('all bugs field present', () => {
  const project = new TestProject();

  new NodePackage(project, {
    bugsEmail: 'bugs@foobar.local',
    bugsUrl: 'bugs.foobar.local',
  });

  expect(synthSnapshot(project)[ 'package.json'].bugs).toMatchSnapshot();
});

test('no bugs field present', () => {
  const project = new TestProject();

  new NodePackage(project, {});

  const snps = synthSnapshot(project);

  expect(snps[ 'package.json'].bugs).toMatchSnapshot();

  expect(snps[ 'package.json'].bugs).toStrictEqual( undefined );
});

test('single bugs field present', () => {
  const project = new TestProject();

  const _email = 'bugs@foobar.local';

  new NodePackage(project, {
    bugsEmail: _email,
  });

  const snps = synthSnapshot(project);

  expect(snps[ 'package.json'].bugs).toMatchSnapshot();

  expect(snps[ 'package.json'].bugs.url).toStrictEqual( undefined );
  expect(snps[ 'package.json'].bugs.email).toStrictEqual( _email );
});

test('lockfile updated (install twice) after "*"s are resolved', () => {
  const project = new Project({ name: 'test' });
  const pkg = new NodePackage(project);

  pkg.addDeps('ms');

  project.synth();

  const yarnLockPath = join(project.outdir, 'yarn.lock');
  const yarnLockLine: string | undefined = readFileSync(yarnLockPath, 'utf8').split('\n').find(x => x.startsWith('ms@'));
  expect(yarnLockLine).toBeDefined();
  expect(yarnLockLine).not.toStrictEqual('ms@^*:'); // "*" should be resolved to a specific version

  const [name, version] = yarnLockLine!.split(':')[0].split('@');
  expect(name).toStrictEqual('ms');
  const min = semver.minVersion(version)?.version;
  expect(semver.gte(min!, '2.1.3')).toBeTruthy();

  expect(pkg._installCount).toBe(2);
});

test('install only once if all versions are resolved', () => {
  const project = new Project({ name: 'test' });
  const pkg = new NodePackage(project);

  pkg.addDeps('ms@^2');

  project.synth();

  expect(pkg._installCount).toBe(1);
});

test('no install if package.json did not change at all', () => {
  const outdir = mkdtemp({ cleanup: false });

  const orig = {
    'name': 'test',
    'scripts': {
      'build': 'npx projen build',
      'compile': 'npx projen compile',
      'default': 'npx projen default',
      'package': 'npx projen package',
      'post-compile': 'npx projen post-compile',
      'pre-compile': 'npx projen pre-compile',
      'test': 'npx projen test',
    },
    'dependencies': {
      ms: '^2',
    },
    'main': 'lib/index.js',
    'license': 'Apache-2.0',
    'version': '0.0.0',
    '//': '~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".',
  };

  writeFileSync(join(outdir, 'package.json'), JSON.stringify(orig, undefined, 2));
  mkdirpSync(join(outdir, 'node_modules')); // <-- also causes an "install"

  const project = new Project({ name: 'test', outdir });
  project.addExcludeFromCleanup('package.json');
  const pkg = new NodePackage(project);

  pkg.addDeps('ms@^2');

  project.synth();
  expect(pkg._installCount).toBe(0);
});