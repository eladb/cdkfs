import { join } from 'path';
import { readFileSync } from 'fs-extra';
import { Project } from '../src';
import { Dependencies, DependencyType } from '../src/deps';
import { TestProject } from './util';

test('no dependencieds, empty manifest', () => {
  // GIVEN
  const p = new TestProject();

  // THEN
  expect(depsManifest(p)).toStrictEqual({
    '//': '~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".',
    'projectType': 'unknown',
  });
});

test('minimal case', () => {
  // GIVEN
  const p = new TestProject();

  // WHEN
  const dep = p.deps.addDependency('my-first-dep', DependencyType.RUNTIME);

  // THEN
  expect(dep.name).toBe('my-first-dep');
  expect(dep.version).toBeUndefined();
  expect(dep.type).toBe(DependencyType.RUNTIME);
  expect(depsManifest(p)).toMatchSnapshot();
});

test('with version requirement', () => {
  // GIVEN
  const p = new TestProject();

  // WHEN
  const dep = p.deps.addDependency('depy@^7', DependencyType.PEER);

  // THEN
  expect(dep.name).toBe('depy');
  expect(dep.version).toBe('^7');
  expect(dep.type).toBe(DependencyType.PEER);

  expect(depsManifest(p)).toMatchSnapshot();
});

test('deps.all returns all the dependencies', () => {
  // GIVEN
  const p = new TestProject();

  // WHEN
  p.deps.addDependency('dep1', DependencyType.DEVENV);
  p.deps.addDependency('dep2', DependencyType.RUNTIME);
  p.deps.addDependency('dep3', DependencyType.PEER);

  // THEN
  expect(p.deps.all).toMatchSnapshot();
});

function depsManifest(p: Project) {
  p.synth();
  return JSON.parse(readFileSync(join(p.outdir, Dependencies.MANIFEST_FILE), 'utf-8'));
}