// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`addBranch() can be used for additional release branches 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes                    	linguist-generated
/.github/workflows/release-10.x.yml	linguist-generated
/.github/workflows/release-2.x.yml 	linguist-generated
/.github/workflows/release.yml     	linguist-generated
/.gitignore                        	linguist-generated
/.projen/**                        	linguist-generated
/.projen/deps.json                 	linguist-generated
/.projen/tasks.json                	linguist-generated",
  ".github/workflows/release-10.x.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release-10.x
on:
  push:
    branches:
      - 10.x
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"10\\"
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f version.json version.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./version.json.bak.json').version\\")
          -F .changelog.tmp.md -t v$(node -p
          \\"require('./version.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
",
  ".github/workflows/release-2.x.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release-2.x
on:
  push:
    branches:
      - 2.x
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"2\\"
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f version.json version.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./version.json.bak.json').version\\")
          -F .changelog.tmp.md -t v$(node -p
          \\"require('./version.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
",
  ".github/workflows/release.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"1\\"
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f version.json version.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./version.json.bak.json').version\\")
          -F .changelog.tmp.md -t v$(node -p
          \\"require('./version.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
/.changelog.tmp.md
node_modules/
!/.gitattributes
!/.github/workflows/release-10.x.yml
!/.github/workflows/release-2.x.yml
!/.github/workflows/release.yml
!/.projen/deps.json
!/.projen/tasks.json
",
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "tasks": Object {
      "bump": Object {
        "category": "20.release",
        "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
        "description": "Bumps version based on latest git tag and generates a changelog entry",
        "env": Object {
          "CHANGELOG": ".changelog.tmp.md",
          "OUTFILE": "version.json",
        },
        "name": "bump",
        "steps": Array [
          Object {
            "builtin": "release/bump-version",
          },
        ],
      },
      "release": Object {
        "name": "release",
      },
      "unbump": Object {
        "category": "20.release",
        "description": "Restores version to 0.0.0",
        "env": Object {
          "CHANGELOG": ".changelog.tmp.md",
          "OUTFILE": "version.json",
        },
        "name": "unbump",
        "steps": Array [
          Object {
            "builtin": "release/reset-version",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
}
`;

exports[`addJobs() can be used to add arbitrary jobs to the release workflows 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes                    	linguist-generated
/.github/workflows/foo-workflow.yml	linguist-generated
/.github/workflows/release.yml     	linguist-generated
/.gitignore                        	linguist-generated
/.projen/**                        	linguist-generated
/.projen/deps.json                 	linguist-generated
/.projen/tasks.json                	linguist-generated",
  ".github/workflows/foo-workflow.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: foo-workflow
on:
  push:
    branches:
      - foo
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"4\\"
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f version.json version.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./version.json.bak.json').version\\")
          -F .changelog.tmp.md -t v$(node -p
          \\"require('./version.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
  release_pypi:
    name: Release to PyPi
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-pypi
        env:
          TWINE_USERNAME: \${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: \${{ secrets.TWINE_PASSWORD }}
    container:
      image: jsii/superchain
  random_job:
    runs-on: foo
    permissions:
      actions: none
    steps: []
",
  ".github/workflows/release.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"0\\"
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f version.json version.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./version.json.bak.json').version\\")
          -F .changelog.tmp.md -t v$(node -p
          \\"require('./version.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
  release_pypi:
    name: Release to PyPi
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-pypi
        env:
          TWINE_USERNAME: \${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: \${{ secrets.TWINE_PASSWORD }}
    container:
      image: jsii/superchain
  random_job:
    runs-on: foo
    permissions:
      actions: none
    steps: []
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
/.changelog.tmp.md
node_modules/
!/.gitattributes
!/.github/workflows/foo-workflow.yml
!/.github/workflows/release.yml
!/.projen/deps.json
!/.projen/tasks.json
",
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "tasks": Object {
      "bump": Object {
        "category": "20.release",
        "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
        "description": "Bumps version based on latest git tag and generates a changelog entry",
        "env": Object {
          "CHANGELOG": ".changelog.tmp.md",
          "OUTFILE": "version.json",
        },
        "name": "bump",
        "steps": Array [
          Object {
            "builtin": "release/bump-version",
          },
        ],
      },
      "release": Object {
        "name": "release",
      },
      "unbump": Object {
        "category": "20.release",
        "description": "Restores version to 0.0.0",
        "env": Object {
          "CHANGELOG": ".changelog.tmp.md",
          "OUTFILE": "version.json",
        },
        "name": "unbump",
        "steps": Array [
          Object {
            "builtin": "release/reset-version",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
}
`;

exports[`majorVersion can be 0 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"0\\"
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f goo.json goo.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./goo.json.bak.json').version\\") -F
          .changelog.tmp.md -t v$(node -p
          \\"require('./goo.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
"
`;

exports[`minimal 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes               	linguist-generated
/.github/workflows/release.yml	linguist-generated
/.gitignore                   	linguist-generated
/.projen/**                   	linguist-generated
/.projen/deps.json            	linguist-generated
/.projen/tasks.json           	linguist-generated",
  ".github/workflows/release.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f version.json version.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./version.json.bak.json').version\\")
          -F .changelog.tmp.md -t v$(node -p
          \\"require('./version.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
/.changelog.tmp.md
node_modules/
!/.gitattributes
!/.github/workflows/release.yml
!/.projen/deps.json
!/.projen/tasks.json
",
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "tasks": Object {
      "bump": Object {
        "category": "20.release",
        "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
        "description": "Bumps version based on latest git tag and generates a changelog entry",
        "env": Object {
          "CHANGELOG": ".changelog.tmp.md",
          "OUTFILE": "version.json",
        },
        "name": "bump",
        "steps": Array [
          Object {
            "builtin": "release/bump-version",
          },
        ],
      },
      "release": Object {
        "name": "release",
      },
      "unbump": Object {
        "category": "20.release",
        "description": "Restores version to 0.0.0",
        "env": Object {
          "CHANGELOG": ".changelog.tmp.md",
          "OUTFILE": "version.json",
        },
        "name": "unbump",
        "steps": Array [
          Object {
            "builtin": "release/reset-version",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
}
`;

exports[`prerelease can be specified per branch 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"0\\"
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f goo.json goo.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./goo.json.bak.json').version\\") -F
          .changelog.tmp.md -t v$(node -p
          \\"require('./goo.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
"
`;

exports[`prerelease can be specified per branch 2`] = `undefined`;

exports[`publisher (defaults) 1`] = `
"# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f version.json version.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./version.json.bak.json').version\\")
          -F .changelog.tmp.md -t v$(node -p
          \\"require('./version.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
  release_golang:
    name: Release to Go
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-golang
        env:
          GITHUB_TOKEN: \${{ secrets.GO_GITHUB_TOKEN }}
          GIT_USER_NAME: GitHub Actions
          GIT_USER_EMAIL: github-actions@github.com
    container:
      image: jsii/superchain
  release_maven:
    name: Release to Maven
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-maven
        env:
          MAVEN_GPG_PRIVATE_KEY: \${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: \${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}
          MAVEN_PASSWORD: \${{ secrets.MAVEN_PASSWORD }}
          MAVEN_USERNAME: \${{ secrets.MAVEN_USERNAME }}
          MAVEN_STAGING_PROFILE_ID: \${{ secrets.MAVEN_STAGING_PROFILE_ID }}
    container:
      image: jsii/superchain
  release_npm:
    name: Release to NPM
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-npm
        env:
          NPM_TOKEN: \${{ secrets.NPM_TOKEN }}
    container:
      image: jsii/superchain
  release_nuget:
    name: Release to Nuget
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-nuget
        env:
          NUGET_API_KEY: \${{ secrets.NUGET_API_KEY }}
    container:
      image: jsii/superchain
  release_pypi:
    name: Release to PyPi
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Release
        run: npx -p jsii-release@latest jsii-release-pypi
        env:
          TWINE_USERNAME: \${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: \${{ secrets.TWINE_PASSWORD }}
    container:
      image: jsii/superchain
"
`;

exports[`releaseBranches can be use to define additional branches 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes                    	linguist-generated
/.github/workflows/release-3.x.yml 	linguist-generated
/.github/workflows/release-next.yml	linguist-generated
/.github/workflows/release.yml     	linguist-generated
/.gitignore                        	linguist-generated
/.projen/**                        	linguist-generated
/.projen/deps.json                 	linguist-generated
/.projen/tasks.json                	linguist-generated",
  ".github/workflows/release-3.x.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release-3.x
on:
  push:
    branches:
      - 3.x
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"3\\"
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f goo.json goo.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./goo.json.bak.json').version\\") -F
          .changelog.tmp.md -t v$(node -p
          \\"require('./goo.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
",
  ".github/workflows/release-next.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release-next
on:
  push:
    branches:
      - next
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"4\\"
          PRERELEASE: pre
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f goo.json goo.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./goo.json.bak.json').version\\") -F
          .changelog.tmp.md -t v$(node -p
          \\"require('./goo.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
",
  ".github/workflows/release.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: Release
on:
  push:
    branches:
      - main
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"1\\"
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f goo.json goo.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./goo.json.bak.json').version\\") -F
          .changelog.tmp.md -t v$(node -p
          \\"require('./goo.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
/.changelog.tmp.md
node_modules/
!/.gitattributes
!/.github/workflows/release-3.x.yml
!/.github/workflows/release-next.yml
!/.github/workflows/release.yml
!/.projen/deps.json
!/.projen/tasks.json
",
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "tasks": Object {
      "bump": Object {
        "category": "20.release",
        "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
        "description": "Bumps version based on latest git tag and generates a changelog entry",
        "env": Object {
          "CHANGELOG": ".changelog.tmp.md",
          "OUTFILE": "goo.json",
        },
        "name": "bump",
        "steps": Array [
          Object {
            "builtin": "release/bump-version",
          },
        ],
      },
      "release": Object {
        "name": "release",
      },
      "unbump": Object {
        "category": "20.release",
        "description": "Restores version to 0.0.0",
        "env": Object {
          "CHANGELOG": ".changelog.tmp.md",
          "OUTFILE": "goo.json",
        },
        "name": "unbump",
        "steps": Array [
          Object {
            "builtin": "release/reset-version",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
}
`;

exports[`with major version filter 1`] = `
Object {
  ".gitattributes": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

/.gitattributes               	linguist-generated
/.github/workflows/release.yml	linguist-generated
/.gitignore                   	linguist-generated
/.projen/**                   	linguist-generated
/.projen/deps.json            	linguist-generated
/.projen/tasks.json           	linguist-generated",
  ".github/workflows/release.yml": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".

name: release
on:
  push:
    branches:
      - 10.x
  workflow_dispatch: {}
jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      CI: \\"true\\"
      RELEASE: \\"true\\"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name \\"Automation\\"
          git config user.email \\"github-actions@github.com\\"
      - name: Bump to next version
        run: projen bump
        env:
          MAJOR: \\"10\\"
      - name: release
        run: projen release
      - name: Backup version file
        run: cp -f version.json version.json.bak.json
      - name: Unbump
        run: projen unbump
      - name: Anti-tamper check
        run: git diff --ignore-space-at-eol --exit-code
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::\\"$(git ls-remote origin -h \${{
          github.ref }} | cut -f1)\\"
      - name: Create release
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        run: gh release create v$(node -p \\"require('./version.json.bak.json').version\\")
          -F .changelog.tmp.md -t v$(node -p
          \\"require('./version.json.bak.json').version\\")
        env:
          GITHUB_TOKEN: \${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        if: \${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2.1.1
        with:
          name: dist
          path: dist
",
  ".gitignore": "# ~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".
/.changelog.tmp.md
node_modules/
!/.gitattributes
!/.github/workflows/release.yml
!/.projen/deps.json
!/.projen/tasks.json
",
  ".projen/tasks.json": Object {
    "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \\"npx projen\\".",
    "tasks": Object {
      "bump": Object {
        "category": "20.release",
        "condition": "! git log --oneline -1 | grep -q \\"chore(release):\\"",
        "description": "Bumps version based on latest git tag and generates a changelog entry",
        "env": Object {
          "CHANGELOG": ".changelog.tmp.md",
          "OUTFILE": "version.json",
        },
        "name": "bump",
        "steps": Array [
          Object {
            "builtin": "release/bump-version",
          },
        ],
      },
      "release": Object {
        "name": "release",
      },
      "unbump": Object {
        "category": "20.release",
        "description": "Restores version to 0.0.0",
        "env": Object {
          "CHANGELOG": ".changelog.tmp.md",
          "OUTFILE": "version.json",
        },
        "name": "unbump",
        "steps": Array [
          Object {
            "builtin": "release/reset-version",
          },
        ],
      },
    },
  },
  "README.md": "# replace this",
}
`;
