// import { NodeProject } from './node-project';

export interface GithubActionStep {
  name?: string;
  uses?: string;
  run?: string;
  with?: {
    [name: string]: any;
  };
}

export interface GithubAction {
  readonly steps: GithubActionStep[];
}

// export class WorkflowBootstrapAction implements GithubAction {
//   public readonly steps: GithubActionStep[];

//   constructor(project: NodeProject) {
//     const nodeVersion = !project.minNodeVersion ? [] : [
//       {
//         uses: 'actions/setup-node@v1',
//         with: { 'node-version': project.nodeVersion },
//       },
//     ];

//     this.steps = [
//       // check out sources.
//       CheckoutActionStep,

//       // use the correct node version
//       ...nodeVersion,

//       // bootstrap the repo
//       ...project.bootstrapSteps,

//       // first anti-tamper check (right after bootstrapping)
//       // this will identify any non-committed files generated by projen
//       ...project.workflowAntitamperSteps,
//     ];
//   }
// }

// export class CodeCovAction implements GithubAction {
//   public readonly steps: GithubActionStep[];

//   constructor(project: NodeProject) {
//     this.steps = [
//       {
//         name: 'Upload coverage to Codecov',
//         uses: 'codecov/codecov-action@v1',
//         with: {
//           token: '${{ secrets.CODECOV_TOKEN }}',
//           directory: project.jest?.config?.coverageDirectory,
//         },
//       },
//     ];
//   }
// }

export const CheckoutActionStep: GithubActionStep = {
  uses: 'actions/checkout@v2',
};

export const SetGitIdentityActionStep: GithubActionStep = {
  name: 'Set git identity',
  run: [
    'git config user.name "Auto-bump"',
    'git config user.email "github-actions@github.com"',
  ].join('\n'),
};

export const UploadArtifactActionStep: GithubActionStep = {
  name: 'Upload artifact',
  uses: 'actions/upload-artifact@v2.1.1',
  with: {
    name: 'dist',
    path: 'dist',
  },
};